{"version":3,"sources":["loadingGif.gif","components/Header.js","components/DoggoProfile.js","components/Modal.js","components/Loading.js","components/Confirmed.js","components/Declined.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","clickEvent","className","onClick","DoggoProfile","imgSrc","src","alt","Modal","showLoading","closeEvent","Loading","img","Component","Confirmed","class","Declined","App","scrollToDoggoSelection","doggoSelection","document","querySelector","addEventListener","scrollIntoView","behavior","block","openModal","setState","modal","closeModal","isHeader","isDoggoSelection","isLoading","randomBool","bool","Math","round","random","confirmation","state","doggo","axios","method","url","responseType","then","res","myData","data","map","item","doggoURL","doggoID","id","this","dog","key","confrimation","confitmation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddb40510.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loadingGif.55c8a2b4.gif\";","import React from 'react';\n\nconst Header = ({clickEvent}) => {\t\n\treturn (\n\t\t<header>\t\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<div className=\"headerContainer\">\n\t\t\t\t\t<h1>Pupper Play Date</h1>\n\t\t\t\t\t\n\t\t\t\t\t<button \n\t\t\t\t\t\tonClick={clickEvent} \n\t\t\t\t\t\tclassName=\"viewButton\">\n\t\t\t\t\t\t\tView Puppers\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</header>\n\t)\n}\n\n\nexport default Header;","import React from 'react';\n\nconst DoggoProfile = ({ imgSrc, clickEvent }) => {\n\treturn(\n\t\t<div className='doggoProfile'>\n\t\t\t\n\t\t\t<div className='imageContainer'>\n\t\t\t\t<img src={imgSrc} alt=\"What a handsome pupper\"/>\n\t\t\t</div>\n\t\t\t<div className='online'>\n\t\t\t\t<p>\n\t\t\t\t\t<i className='fas fa-bone'></i>\n\t\t\t\t\tOnline Now!\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<button onClick={clickEvent}>\n\t\t\t\t<i className='fas fa-paw'></i>\n\t\t\t\tSelect me!\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default DoggoProfile;","import React from 'react';\n\nconst Modal = ({showLoading, closeEvent}) => {\n\treturn (\n\t\t<div className='modalContainer'>\n\t\t\t<div className='confirmationModal wrapper'>\n\t\t\t\t<div className='modalImage'>\n\t\t\t\t\t<img src=\"\" alt=\"Such a handsome pupper\"/>\n\t\t\t\t</div>\n\t\t\t\t<h3>Would you like to confirm your playdate?</h3>\n\t\t\t\t<div className='btn'>\n\t\t\t\t\t<button onClick={showLoading} className='yes'>Yes</button>\n\t\t\t\t\t<button onClick={closeEvent} className='no'>No</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Modal;","import React, {Component} from 'react';\nimport img from '../loadingGif.gif';\n\nclass Loading extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='loading'>\n\t\t\t\t<div className='loadingContainer'>\n\t\t\t\t\t<img src={img} alt='GIF of cartoon dog dancing'/>\n\t\t\t\t</div>\n\t\t\t\t<h2>\n\t\t\t\t\tPlease wait while we confirm your playdate!\n\t\t\t\t</h2>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Loading;","import React from 'react';\n\nconst Confirmed = () => {\n\treturn (\n\t\t<div  className='wrapper'>\n\t\t\t<div className='confirmed'>\n\t\t\t\t<i class=\"fas fa-check-circle\"></i>\n\t\t\t\t<h3>Yay! Your playdate has been confirmed!</h3>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Confirmed;","import React from 'react';\n\nconst Declined = () => {\n\treturn (\n\t\t<div className='wrapper'>\n\t\t\t<div className='declined'>\n\t\t\t\t<i class=\"fas fa-times-circle\"></i>\n\t\t\t\t<h3>Oh no! Your playdate has been declined!</h3>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Declined;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Header from './components/Header.js';\nimport DoggoProfile from './components/DoggoProfile.js';\nimport Modal from './components/Modal.js';\nimport Loading from './components/Loading.js';\nimport Confirmed from './components/Confirmed.js';\nimport Declined from './components/Declined.js';\nimport './App.css';\n\nclass  App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tdoggo: [],\n\t\t\tisHeader: true,\n\t\t\tisDoggoSelection: true,\n\t\t\tmodal: false,\n\t\t\tisLoading: '',\n\t\t\tconfirmation: '',\n\t\t}\n\t\t\n\t}\n\n\tcomponentDidMount() {\n\t\t// Make Axios request\n\t\t// axios({\n\t\t// \tmethod: 'GET',\n\t\t// \turl: 'https://proxy.hackeryou.com',\n\t\t// \tresponseType: 'json',\n\t\t// \tparams: {\n\t\t// \t\treqUrl:\n\t\t// \t\t\t'http://shibe.online/api/shibes?count=10&urls=true&httpsUrls=false',\n\t\t\t\t\n\t\t// \t\tproxyHeaders: {\n\t\t// \t\t\theader_params: 'value',\n\t\t// \t\t},\n\t\t// \t},\n\t\t// \txmlToJSON: false,\n    // }).then((res) => {\n    //   this.setState({\n\t\t// \t\tdoggoURL: res.data,\n\t\t// \t})\n\t\t// });\n\n\t\taxios({\n\t\t\tmethod: 'GET',\n\t\t\turl: 'https://api.thedogapi.com/v1/images/search?apiKey=16ec4811-e569-402f-b549-dea6709fcca2&limit=20',\n\t\t\tresponseType: 'JSON'\n\t\t}).then(res => {\n\t\t\t// Store the result data so its easier to work with\n\t\t\tconst result = res.data\n\t\t\t\n\t\t\t// map over res.data and return an array due to nesting issues in res.data\n\t\t\tconst myData = result.map(item => {\n\t\t\t\treturn ({\n\t\t\t\t\tdoggoURL: item.url,\n\t\t\t\t\tdoggoID: item.id\n\t\t\t\t})\n\t\t\t})\n\n\t\t\t// push that returned array into this.state\n\t\t\tthis.setState({\n\t\t\t\tdoggo: myData,\n\t\t\t})\n\t\t}) // End axios request\n\t}\n\n\tscrollToDoggoSelection = () => {\n\t\tconst doggoSelection = document.querySelector('.doggoSelection');\n\n\t\tdocument.querySelector('.viewButton').addEventListener('click', () => {\n\t\t\tdoggoSelection.scrollIntoView({\n\t\t\t\tbehavior: 'smooth',\n\t\t\t\tblock: 'start'\n\t\t\t})\n\t\t});\n\t}\n\n\topenModal = () => {\n\t\tthis.setState({\n\t\t\tmodal: true,\n\t\t})\n\t}\n\n\tcloseModal = () => {\n\t\tthis.setState({\n\t\t\tmodal: false,\n\t\t})\n\t}\n\n\tshowLoading = () => {\n\t\tthis.setState({\n\t\t\tisHeader: false,\n\t\t\tisDoggoSelection: false,\n\t\t\tmodal: false,\n\t\t\tisLoading: true,\n\t\t})\n\t}\n\n\trandomBool = () => {\n\t\tconst bool = Math.round(Math.random() * 1);\n\n\t\tthis.setState({\n\t\t\tconfirmation: bool,\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t{/* Import Header comp */}\n\t\t\t\t{ this.state.isHeader ?\n\t\t\t\t\t\t<Header className='wrapper' clickEvent={this.scrollToDoggoSelection} />\n\t\t\t\t\t\t: null\n\t\t\t\t}\n\n\t\t\t\t{/* Map and return doggo profiles */}\n\t\t\t\t{this.state.isDoggoSelection ? \n\t\t\t\t\t<div className='doggoSelection wrapper'>\n\t\t\t\t\t\t{this.state.doggo.map((dog) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<DoggoProfile \n\t\t\t\t\t\t\t\t\tkey={dog.doggoID} \n\t\t\t\t\t\t\t\t\timgSrc={dog.doggoURL}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)})}\n\t\t\t\t\t</div> \n\t\t\t\t\t: null\n\t\t\t\t}\n\n\t\t\t\t{/* Display pop up modal with selected doggo to confirm selection */}\n\t\t\t\t{this.state.modal ? \n\t\t\t\t\t<Modal showLoading={this.showLoading} closeEvent={this.closeModal} />\n\t\t\t\t\t: null\n\t\t\t\t}\n\n\t\t\t\t{/* Show Loading screen after doggo is selected */}\n\t\t\t\t{this.state.isLoading ? <Loading className='wrapper' /> : null}\n\n\t\t\t\t{/* Display either appointment confirm or declined */}\n\t\t\t\t{this.state.confrimation == true ?  <Confirmed /> : null}\n\t\t\t\t{this.state.confitmation == false ? <Declined /> : null}\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}